<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="http://www.springframework.org/schema/context 
			     http://www.springframework.org/schema/context/spring-context-4.0.xsd
			     http://www.springframework.org/schema/beans 
			     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			     http://www.springframework.org/schema/tx 
			     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			     http://www.springframework.org/schema/aop 
			     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd" >
	
	
	<!-- 读  数据源配置 start -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" scope="singleton"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbcUrl}" />
      <property name="username" value="${jdbcUserName}" />
      <property name="password" value="${jdbcPassWord}" />
       <property name="driverClassName" value="${jdbcDriverClassName}" />
		
      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="${initialSize}" />
      <property name="minIdle" value="${minIdle}" /> 
      <property name="maxActive" value="${maxActive}" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="${maxWait}" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

      <property name="validationQuery" value="${validationQuery}" />
      <property name="testWhileIdle" value="${testWhileIdle}" />
      <property name="testOnBorrow" value="${testOnBorrow}" />
      <property name="testOnReturn" value="${testOnReturn}" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="${poolPreparedStatements}" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />

      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="${filters}" /> 
  </bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/**/*Mapper.xml" />
		<property name="configLocation" value="classpath:mybatis/config/sqlConfig.xml"></property>
		<!-- 配置Mybatis的插件plugin-->
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cetc.repository" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />
  		
	</bean>
 	<!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />    
	
		<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 切面 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.cetc.service.*.*(..))" />
	</aop:config>
	
	
</beans>